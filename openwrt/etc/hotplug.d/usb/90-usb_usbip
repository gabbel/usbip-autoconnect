#!/bin/sh

# Set the paths to the required files
# Path to the list of allowed USB devices
ALLOWED_DEVICES_FILE="/etc/usbip_allowed_usb_devices.txt"

# Temporary file to store connected devices
CONNECTED_DEVICES_FILE="/tmp/connected_usb_devices.txt"

# Check if the usbip command exists
command -v usbip >/dev/null 2>&1 || { log "Error: usbip command not found."; exit 1; }

# Function to check if a USB device is allowed
is_device_allowed() {
    local vendor_id="$1"
    local device_id="$2"
    grep -q "$vendor_id:$device_id" "$ALLOWED_DEVICES_FILE"
}

# Function to check if a device is already in the connected devices file
is_device_connected() {
    local bus_id="$1"
    grep -q ",$bus_id$" "$CONNECTED_DEVICES_FILE"
}

# Function to add a device to the connected devices file
add_device() {
    local vendor_id="$1"
    local device_id="$2"
    local bus_id="$3"
    echo "$vendor_id,$device_id,$bus_id" >> "$CONNECTED_DEVICES_FILE"
    # share this device over usbip
    usbip bind --busid "$bus_id"
}

# Function to remove a device from the connected devices file
remove_device() {
    # Iterate through connected devices file
    while IFS=, read -r vendor_id device_id bus_id; do
        device_path="/sys/bus/usb/devices/$bus_id"

        # Check if the device path exists
        if [ -e "$device_path" ]; then
            # Device is still connected, do nothing
            continue
        else
            # Device is no longer present
            echo "Device disconnected: $vendor_id $device_id $bus_id"

            # Remove the line from the connected devices file
            sed -i "/,$bus_id$/d" "$CONNECTED_DEVICES_FILE"

            # No longer share that usbdevice over usbip
			usbip unbind --busid "$bus_id"
        fi
    done < "$CONNECTED_DEVICES_FILE"
}

# Parse hotplug events
case "$ACTION" in
    add)
        # Check if the device has idVendor and idProduct in the same directory
        if [ -e /sys${DEVPATH}/idVendor ] && [ -e /sys${DEVPATH}/idProduct ]; then
            # Extract vendor ID, device ID, and bus ID
            vendor_id=$(cat /sys${DEVPATH}/idVendor)
            device_id=$(cat /sys${DEVPATH}/idProduct)
            bus_id=$(ls -d /sys${DEVPATH} | xargs basename)

            # Check if the device is allowed and not already connected
            if is_device_allowed "$vendor_id" "$device_id" && ! is_device_connected "$bus_id"; then
                add_device "$vendor_id" "$device_id" "$bus_id"
            fi
        fi
        ;;
    remove)
        # Check if a device from $CONNECTED_DEVICES_FILE has been disconnected.
        if [ "$(ls -A "$CONNECTED_DEVICES_FILE")" ]; then
            remove_device
        fi
        ;;
esac
